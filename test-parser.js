// Comprehensive SRO Parser Test Suite - Node.js Integration Tests
import fs from 'fs';
import path, { dirname } from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Test suite class
class ParserIntegrationTestSuite {
  constructor() {
    this.results = [];
    this.reestrData = null;
    this.localReestrData = null;
  }

  log(message, level = 'info') {
    const prefix = level === 'error' ? '‚ùå' : level === 'warning' ? '‚ö†Ô∏è' : level === 'success' ? '‚úÖ' : 'üìù';
    console.log(`${prefix} ${message}`);
  }

  async runTest(name, testFn) {
    const start = Date.now();
    try {
      this.log(`–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${name}`);
      await testFn.call(this);
      const duration = Date.now() - start;
      this.results.push({ name, success: true, duration });
      this.log(`‚úì –¢–µ—Å—Ç "${name}" –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}ms`, 'success');
    } catch (error) {
      const duration = Date.now() - start;
      const err = error;
      this.results.push({ name, success: false, duration, error: err.message });
      this.log(`‚úó –¢–µ—Å—Ç "${name}" –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è –∑–∞ ${duration}ms: ${err.message}`, 'error');
    }
  }

  async loadTestData() {
    try {
      // –ó–∞–≥—Ä—É–∑–∫–∞ JSON —Ä–µ–µ—Å—Ç—Ä–∞
      const reestrPath = path.join(__dirname, 'public', 'reestr.json');
      if (fs.existsSync(reestrPath)) {
        this.reestrData = JSON.parse(fs.readFileSync(reestrPath, 'utf8'));
        this.log(`–ó–∞–≥—Ä—É–∂–µ–Ω JSON —Ä–µ–µ—Å—Ç—Ä: ${Object.keys(this.reestrData).length} –∑–∞–ø–∏—Å–µ–π`);
      }

      // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
      const localReestrPath = path.join(__dirname, 'public', 'local_reestr.txt');
      if (fs.existsSync(localReestrPath)) {
        this.localReestrData = fs.readFileSync(localReestrPath, 'utf8');
        this.log('–ó–∞–≥—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π TXT —Ä–µ–µ—Å—Ç—Ä');
      }
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error');
    }
  }

  async runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ SRO...\n');
    await this.loadTestData();

    // –¢–µ—Å—Ç 1: Valid INN from reestr data
    await this.runTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ò–ù–ù –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞', async function() {
      if (!this.reestrData) throw new Error('JSON —Ä–µ–µ—Å—Ç—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');

      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ò–ù–ù –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
      const testInn = Object.keys(this.reestrData)[0];

      const result = await this.testLiveParser(testInn);
      if (!result.success && !result.found) {
        throw new Error('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞');
      }
    });

    // –¢–µ—Å—Ç 2: Invalid INN
    await this.runTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –ò–ù–ù', async function() {
      const result = await this.testLiveParser('9999999999');
      if (result.success) {
        throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ò–ù–ù –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    });

    // –¢–µ—Å—Ç 3: Network error handling
    await this.runTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫', async function() {
      // Mock network error by using invalid hostname
      try {
        const response = await fetch('http://invalid.domain.that.does.not.exist.test/reestr/', { timeout: 5000 });
        // If we get here, the network is configured strangely
        console.log('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞');
      } catch (error) {
        this.log('–°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      }
    });

    // –¢–µ—Å—Ç 4: JSON data validation
    await this.runTest('–í–∞–ª–∏–¥–∞—Ü–∏—è JSON –¥–∞–Ω–Ω—ã—Ö —Ä–µ–µ—Å—Ç—Ä–∞', function() {
      if (!this.reestrData) throw new Error('JSON —Ä–µ–µ—Å—Ç—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      const sampleInn = Object.keys(this.reestrData)[0];
      const record = this.reestrData[sampleInn];

      if (!record.status || !record.org_name) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ');
      }

      if (record.status !== '–ß–ª–µ–Ω –°–†–û' && record.status !== '–ò—Å–∫–ª—é—á–µ–Ω') {
        throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${record.status}`);
      }
    });

    // –¢–µ—Å—Ç 5: Data consistency between local and remote
    await this.runTest('–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö', async function() {
      if (!this.reestrData) throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');

      const testInn = Object.keys(this.reestrData)[0];
      const expected = this.reestrData[testInn];

      const result = await this.testLiveParser(testInn);
      if (result.found && result.name && expected.org_name !== result.name) {
        throw new Error(`–ò–º–µ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å "${expected.org_name}", –ø–æ–ª—É—á–µ–Ω–æ "${result.name}"`);
      }
    });

    // –¢–µ—Å—Ç 6: HTML parsing edge cases
    await this.runTest('HTML –ø–∞—Ä—Å–∏–Ω–≥ edge cases', async function() {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ò–ù–ù
      const result = await this.testLiveParser('5258098350');

      if (result.error && result.error.includes('HTTP')) {
        // Network issue - skip this test
        console.log('–ü—Ä–æ–ø—É—â–µ–Ω —Ç–µ—Å—Ç: —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      if (typeof result.found !== 'boolean') {
        throw new Error('–ü–æ–ª–µ found –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean');
      }
    });

    this.printSummary();
  }

  async testLiveParser(inn) {
    return testReestrParserFunc(inn);
  }

  printSummary() {
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.results.length}`);
    console.log(`–£—Å–ø–µ—à–Ω–æ: ${this.results.filter(r => r.success).length}`);
    console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.results.filter(r => !r.success).length}`);

    const failed = this.results.filter(r => !r.success);
    if (failed.length > 0) {
      console.log('\n‚ùå –ü—Ä–æ–≤–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã:');
      failed.forEach(r => console.log(`  - ${r.name}: ${r.error}`));
    }

    const totalDuration = this.results.reduce((sum, r) => sum + r.duration, 0);
    console.log(`\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalDuration}ms`);
  }
}

async function testReestrParserFunc(testInn = '5258098350') {
  try {
    // –°–æ–∑–¥–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞
    const searchParams = new URLSearchParams({
      'arrFilter_ff[NAME]': '',
      'arrFilter_pf[INNNumber]': testInn,
      'set_filter': '–ü–æ–∫–∞–∑–∞—Ç—å'
    });

    const searchUrl = `https://www.sronoso.ru/reestr/?${searchParams.toString()}`;

    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch(searchUrl, {
      method: 'GET',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1'
      },
      timeout: 10000
    });

    if (!response.ok) {
      return { success: false, error: `HTTP ${response.status}: ${response.statusText}` };
    }

    const html = await response.text();

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML
    const result = {
      success: true,
      inn: testInn,
      found: false,
      status: '–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –°–†–û',
      htmlLength: html.length
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–∞ –ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
    if (html.includes('–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ') || html.includes('–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è') || html.includes('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')) {
      result.found = false;
      result.status = '–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –°–†–û';
    } else {
      result.found = true;
      result.status = '–ù–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –°–†–û';

      // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
      const tableMatch = html.match(/<table[^>]*>[\s\S]*?<\/table>/i);
      if (tableMatch) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        const rowMatch = html.match(/<td[^>]*>([^<]*?)<\/td>/gi);
        if (rowMatch && rowMatch.length >= 4) {
          const cells = rowMatch.slice(0, 5).map(cell =>
            cell.replace(/<[^>]*>/g, '').trim()
          ).filter(cell => cell.length > 0);

          result.name = cells[0] || '';
          result.details = cells[1] || '';
          result.registrationDate = cells[3] || '';
          result.registrationNumber = cells[4] || '';
        }
      }
    }

    return result;

  } catch (error) {
    return { success: false, error: error.message };
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runMain() {
  const testSuite = new ParserIntegrationTestSuite();
  await testSuite.runAllTests();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–∞—Ö
export {
  ParserIntegrationTestSuite
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  const innArg = process.argv[2];
  if (innArg) {
    testReestrParserFunc(innArg).then(result => {
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ò–ù–ù', innArg, ':', result);
    });
  } else {
    runMain();
  }
}

// Test script for SRO parser
const fetch = require('node-fetch');

async function testReestrParser(testInn = '5258098350') {
  console.log(`Testing SRO parser with INN: ${testInn}`);

  try {
    // –°–æ–∑–¥–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞
    const searchParams = new URLSearchParams({
      'arrFilter_ff[NAME]': '',
      'arrFilter_pf[INNNumber]': testInn,
      'set_filter': '–ü–æ–∫–∞–∑–∞—Ç—å'
    });

    const searchUrl = `https://www.sronoso.ru/reestr/?${searchParams.toString()}`;
    console.log(`Search URL: ${searchUrl}`);

    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch(searchUrl, {
      method: 'GET',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
        'Accept-Encoding': 'gzip, deflate, br',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const html = await response.text();
    console.log(`HTML response length: ${html.length}`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML
    const result = {
      inn: testInn,
      found: false,
      status: '–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –°–†–û'
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–∞ –ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
    if (html.includes('–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ') || html.includes('–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')) {
      console.log('‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ');
    } else {
      console.log('‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ù–ê–ô–î–ï–ù–ê –≤ —Ä–µ–µ—Å—Ç—Ä–µ');

      // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
      const tableMatch = html.match(/<table[^>]*>[\s\S]*?<\/table>/i);
      if (tableMatch) {
        console.log('üìä –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏');

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        const rowMatch = html.match(/<td[^>]*>([^<]*?)<\/td>/gi);
        if (rowMatch && rowMatch.length >= 2) {
          const cells = rowMatch.slice(0, 5).map(cell =>
            cell.replace(/<[^>]*>/g, '').trim()
          ).filter(cell => cell.length > 0);

          console.log('üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', cells);

          result.found = true;
          result.status = '–ù–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –°–†–û';
          result.name = cells[0] || '';
          result.registrationDate = cells[3] || '';
        }
      } else {
        console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
      }
    }

    console.log('üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    return result;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    return { error: error.message };
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testReestrParser(process.argv[2]);
}

module.exports = { testReestrParser };

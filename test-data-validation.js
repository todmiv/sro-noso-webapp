// Data Validation Tests for Reestr Files
// Run with: node test-data-validation.js

import fs from 'fs';
import { fileURLToPath } from 'url';
import path, { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

class DataValidationTestSuite {
  constructor() {
    this.results = [];
    this.reestrData = null;
    this.localReestrData = null;
  }

  log(message, level = 'info') {
    const prefix = level === 'error' ? '‚ùå' : level === 'warning' ? '‚ö†Ô∏è' : level === 'success' ? '‚úÖ' : 'üìù';
    console.log(`${prefix} ${message}`);
  }

  async runTest(name, testFn) {
    const start = Date.now();
    try {
      this.log(`–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${name}`);
      await testFn.call(this);
      const duration = Date.now() - start;
      this.results.push({ name, success: true, duration });
      this.log(`‚úì –¢–µ—Å—Ç "${name}" –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}ms`, 'success');
    } catch (error) {
      const duration = Date.now() - start;
      const err = error;
      this.results.push({ name, success: false, duration, error: err.message });
      this.log(`‚úó –¢–µ—Å—Ç "${name}" –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è –∑–∞ ${duration}ms: ${err.message}`, 'error');
    }
  }

  async loadTestData() {
    try {
      // –ó–∞–≥—Ä—É–∑–∫–∞ JSON —Ä–µ–µ—Å—Ç—Ä–∞
      const reestrPath = path.join(__dirname, 'public', 'reestr.json');
      if (fs.existsSync(reestrPath)) {
        this.reestrData = JSON.parse(fs.readFileSync(reestrPath, 'utf8'));
        this.log(`–ó–∞–≥—Ä—É–∂–µ–Ω JSON —Ä–µ–µ—Å—Ç—Ä: ${Object.keys(this.reestrData).length} –∑–∞–ø–∏—Å–µ–π`);
      }

      // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
      const localReestrPath = path.join(__dirname, 'public', 'local_reestr.txt');
      if (fs.existsSync(localReestrPath)) {
        this.localReestrData = fs.readFileSync(localReestrPath, 'utf8');
        this.log(`–ó–∞–≥—Ä—É–∂–µ–Ω TXT —Ä–µ–µ—Å—Ç—Ä: ${this.localReestrData.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      }
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message || error}`, 'error');
    }
  }

  // Test JSON structure
  testJSONStructure() {
    if (!this.reestrData) throw new Error('JSON —Ä–µ–µ—Å—Ç—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');

    // Check if data is an object
    if (typeof this.reestrData !== 'object' || Array.isArray(this.reestrData)) {
      throw new Error('JSON —Ä–µ–µ—Å—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º');
    }

    const inns = Object.keys(this.reestrData);

    // Test sample records
    for (let i = 0; i < Math.min(10, inns.length); i++) {
      const inn = inns[i];
      const record = this.reestrData[inn];

      // INN validation (length between 9 and 15 digits)
      if (!/^\d{9,15}$/.test(inn)) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù: ${inn}`);
      }

      // Record structure validation
      if (typeof record !== 'object') {
        throw new Error(`–ó–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º –¥–ª—è –ò–ù–ù: ${inn}`);
      }

      if (!record.status) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ status –¥–ª—è –ò–ù–ù: ${inn}`);
      }

      if (!record.org_name) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ org_name –¥–ª—è –ò–ù–ù: ${inn}`);
      }

      if (!record.registration_date) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ registration_date –¥–ª—è –ò–ù–ù: ${inn}`);
      }

      // Status validation
      if (record.status !== '–ß–ª–µ–Ω –°–†–û' && record.status !== '–ò—Å–∫–ª—é—á–µ–Ω') {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ò–ù–ù ${inn}: ${record.status}`);
      }

      // Date validation
      if (!this.isValidDateFormat(record.registration_date)) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –ò–ù–ù ${inn}: ${record.registration_date}`);
      }
    }

    this.log(`‚úì –í–∞–ª–∏–¥–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ ${Math.min(10, inns.length)} –∑–∞–ø–∏—Å–µ–π JSON`);
  }

  // Validate date format
  isValidDateFormat(dateStr) {
    // Russian date format: dd.mm.yyyy
    const dateRegex = /^\d{2}\.\d{2}\.\d{4}$/;
    if (!dateRegex.test(dateStr)) {
      return false;
    }

    const [day, month, year] = dateStr.split('.').map(Number);
    const date = new Date(year, month - 1, day);

    return date.getFullYear() === year &&
           date.getMonth() === month - 1 &&
           date.getDate() === day;
  }

  // Test data completeness
  testDataCompleteness() {
    if (!this.reestrData) throw new Error('JSON —Ä–µ–µ—Å—Ç—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');

    const inns = Object.keys(this.reestrData);
    let completeRecords = 0;
    let incompleteRecords = 0;

    inns.forEach(inn => {
      const record = this.reestrData[inn];

      if (record.status && record.org_name && record.registration_date) {
        completeRecords++;
      } else {
        incompleteRecords++;
        this.log(`–ù–µ–ø–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –ò–ù–ù: ${inn}`, 'warning');
      }
    });

    this.log(`‚úì –ü–æ–ª–Ω—ã–µ –∑–∞–ø–∏—Å–∏: ${completeRecords}, –ù–µ–ø–æ–ª–Ω—ã–µ: ${incompleteRecords}`);

    if (incompleteRecords > 0) {
      throw new Error(`–ù–∞–π–¥–µ–Ω–æ ${incompleteRecords} –Ω–µ–ø–æ–ª–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
    }
  }

  // Test INN uniqueness
  testINNUniqueness() {
    if (!this.reestrData) throw new Error('JSON —Ä–µ–µ—Å—Ç—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');

    const inns = Object.keys(this.reestrData);
    const uniqueINNs = new Set(inns);

    if (inns.length !== uniqueINNs.size) {
      throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ò–ù–ù');
    }

    this.log(`‚úì –í—Å–µ ${inns.length} –ò–ù–ù —É–Ω–∏–∫–∞–ª—å–Ω—ã`);
  }

  // Test organization name format
  testOrganizationNameFormat() {
    if (!this.reestrData) throw new Error('JSON —Ä–µ–µ—Å—Ç—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');

    const inns = Object.keys(this.reestrData);

    inns.forEach(inn => {
      const record = this.reestrData[inn];
      const name = record.org_name;

      // Check for empty names
      if (!name || name.trim().length === 0) {
        throw new Error(`–ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ò–ù–ù: ${inn}`);
      }

      // Check for reasonable length
      if (name.length < 3) {
        throw new Error(`–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ò–ù–ù ${inn}: "${name}"`);
      }

      if (name.length > 200) {
        throw new Error(`–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ò–ù–ù ${inn}: ${name.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      }
    });

    this.log(`‚úì –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è ${inns.length} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π`);
  }

  // Test TXT file format
  testTXTFileFormat() {
    if (!this.localReestrData) {
      this.log('TXT —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω', 'warning');
      return;
    }

    // Basic checks
    if (this.localReestrData.length === 0) {
      throw new Error('TXT —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π');
    }

    // Check for basic structure (should contain some readable content)
    const lines = this.localReestrData.split('\n');
    const nonEmptyLines = lines.filter(line => line.trim().length > 0);

    if (nonEmptyLines.length === 0) {
      throw new Error('TXT —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Ç–∞–µ–º–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ');
    }

    this.log(`‚úì TXT —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç ${nonEmptyLines.length} –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫`);
  }

  // Test data consistency between formats
  testDataConsistency() {
    if (!this.reestrData || !this.localReestrData) {
      this.log('–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ç–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω', 'warning');
      return;
    }

    // Simple check - if we have data in both formats
    const jsonEntries = Object.keys(this.reestrData).length;
    const txtLines = this.localReestrData.split('\n').filter(line => line.trim().length > 0).length;

    // For consistency, TXT should have some relationship to JSON
    // This is a basic check - in reality you'd need domain-specific rules
    this.log(`JSON: ${jsonEntries} –∑–∞–ø–∏—Å–µ–π, TXT: ${txtLines} —Å—Ç—Ä–æ–∫`);

    // Warn if there's significant discrepancy
    const discrepancy = Math.abs(jsonEntries - txtLines) / Math.max(jsonEntries, txtLines);
    if (discrepancy > 2) { // More than 200% difference
      this.log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –±–æ–ª—å—à–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –æ–±—ä–µ–º–µ –¥–∞–Ω–Ω—ã—Ö (${(discrepancy * 100).toFixed(1)}%)`, 'warning');
    } else {
      this.log(`‚úì –î–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –∏–º–µ—é—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º—ã–π –æ–±—ä–µ–º`);
    }
  }

  // Test file encoding
  testFileEncoding() {
    if (!this.reestrData) throw new Error('JSON —Ä–µ–µ—Å—Ç—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');

    // Try to detect encoding issues
    const sampleINN = Object.keys(this.reestrData)[0];
    const sampleName = this.reestrData[sampleINN].org_name;

    // Check for encoding issues (question marks, broken characters)
    if (sampleName.includes('') || sampleName.includes('?')) {
      throw new Error(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${sampleName}`);
    }

    // Check for valid Cyrillic characters
    const cyrillicRegex = /[–∞-—è—ë]/i;
    if (!cyrillicRegex.test(sampleName)) {
      this.log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã: ${sampleName}`, 'warning');
    }

    this.log('‚úì –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
  }

  // Performance test
  async testDataLoadingPerformance() {
    const start = Date.now();

    if (!this.reestrData) throw new Error('JSON —Ä–µ–µ—Å—Ç—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');

    // Simulate loading time
    const inns = Object.keys(this.reestrData);
    let processed = 0;

    for (const inn of inns) {
      const record = this.reestrData[inn];
      // Basic validation
      if (record && record.org_name && record.status) {
        processed++;
      }
    }

    const duration = Date.now() - start;
    this.log(`‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed} –∑–∞–ø–∏—Å–µ–π –∑–∞ ${duration}ms`);

    // Performance threshold
    if (duration > 1000) { // More than 1 second
      this.log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è (${duration}ms)`, 'warning');
    }
  }

  async runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...\n');
    await this.loadTestData();

    const tests = [
      { name: 'JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö', fn: this.testJSONStructure },
      { name: '–ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö', fn: this.testDataCompleteness },
      { name: '–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ò–ù–ù', fn: this.testINNUniqueness },
      { name: '–§–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π', fn: this.testOrganizationNameFormat },
      { name: '–§–æ—Ä–º–∞—Ç TXT —Ñ–∞–π–ª–∞', fn: this.testTXTFileFormat },
      { name: '–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö', fn: this.testDataConsistency },
      { name: '–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤', fn: this.testFileEncoding },
      { name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏', fn: this.testDataLoadingPerformance }
    ];

    for (const test of tests) {
      try {
        await this.runTest(test.name, test.fn.bind(this));
      } catch (error) {
        // Continue with other tests even if one fails
        console.log(`ü•µ –¢–µ—Å—Ç "${test.name}" –ø—Ä–µ—Ä–≤–∞–Ω: ${error.message || error}`);
      }
    }

    this.printSummary();
  }

  printSummary() {
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.results.length}`);
    console.log(`–£—Å–ø–µ—à–Ω–æ: ${this.results.filter(r => r.success).length}`);
    console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.results.filter(r => !r.success).length}`);

    console.log('\nüìà –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤:');
    this.results.forEach((result, index) => {
      const status = result.success ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${index + 1}. ${result.name} - ${result.duration}ms`);
      if (!result.success && result.error) {
        console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
      }
    });

    const failed = this.results.filter(r => !r.success);
    if (failed.length > 0) {
      console.log('\n‚ùå –ü—Ä–æ–≤–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã:');
      failed.forEach(r => console.log(`  - ${r.name}: ${r.error}`));
    }

    const totalDuration = this.results.reduce((sum, r) => sum + r.duration, 0);
    console.log(`\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalDuration}ms`);

    if (this.results.filter(r => !r.success).length === 0) {
      console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! ‚úÖ');
    } else {
      console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ.');
    }
  }
}

// Main test runner
async function main() {
  console.log('üìÇ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...\n');

  const testSuite = new DataValidationTestSuite();
  await testSuite.runAllTests();

  console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// Export for external use
export { DataValidationTestSuite };

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(error => {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤:', error);
    process.exit(1);
  });
}

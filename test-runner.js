// Master Test Runner for SRO Parser Infrastructure
// Run with: node test-runner.js

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { ParserIntegrationTestSuite } from './test-parser.js';
import { APIEndpointsTestSuite, LiveSROTTestSuite } from './test-api-endpoints.js';
import { DataValidationTestSuite } from './test-data-validation.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

class MasterTestRunner {
  constructor() {
    this.testSuites = [];
    this.overallResults = {
      totalSuites: 0,
      totalTests: 0,
      passedTests: 0,
      failedTests: 0,
      skippedTests: 0,
      totalDuration: 0,
      startTime: Date.now(),
      endTime: null
    };
  }

  log(message, level = 'info') {
    const timestamp = new Date().toISOString();
    const prefix = {
      error: '‚ùå',
      warning: '‚ö†Ô∏è',
      success: '‚úÖ',
      info: 'üìù',
      header: 'üöÄ'
    }[level] || 'üìù';

    console.log(`[${timestamp}] ${prefix} ${message}`);
  }

  registerTestSuite(name, suiteClass, ...args) {
    const suite = new suiteClass(...args);
    suite.name = name;
    this.testSuites.push(suite);
  }

  async runAllSuites() {
    this.log('=== –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø INFRASTRUCTURE –ü–ê–†–°–ï–†–ê ===', 'header');

    for (const suite of this.testSuites) {
      this.log(`\n--- –ó–ê–ü–£–°–ö –°–Æ–ò–¢–ê: ${suite.name.toUpperCase()} ---`, 'header');
      console.log('='.repeat(60));

      const suiteStart = Date.now();

      try {
        // Run the suite (assuming runAllTests method exists)
        if (typeof suite.runAllTests === 'function') {
          await suite.runAllTests();

          // Capture results if available
          if (suite.results) {
            const suitePassed = suite.results.filter(r => r.success).length;
            const suiteFailed = suite.results.filter(r => !r.success).length;
            const suiteDuration = Date.now() - suiteStart;

            this.overallResults.totalTests += suite.results.length;
            this.overallResults.passedTests += suitePassed;
            this.overallResults.failedTests += suiteFailed;

            this.log(`–°–Æ–ò–¢ "${suite.name}" –∑–∞–≤–µ—Ä—à–µ–Ω: ${suitePassed}‚úì ${suiteFailed}‚úó –∑–∞ ${suiteDuration}ms`, 'info');
          }
        } else {
          this.log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ç–µ—Å—Ç–æ–≤—ã–π —Å—é–∏—Ç "${suite.name}" –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ runAllTests`, 'warning');
        }

      } catch (error) {
        this.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—é–∏—Ç–µ "${suite.name}": ${error.message || error}`, 'error');
        this.overallResults.failedTests++;
      }

      this.overallResults.totalSuites++;
    }

    this.overallResults.endTime = Date.now();
    this.overallResults.totalDuration = this.overallResults.endTime - this.overallResults.startTime;

    this.printMasterSummary();
  }

  printMasterSummary() {
    console.log('\n' + '='.repeat(80));
    this.log('=== –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–°–ï–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===', 'header');
    console.log('='.repeat(80));

    console.log(`üìä –û–±–∑–æ—Ä:
  ‚Ä¢ –ó–∞–ø—É—â–µ–Ω–æ —Å—é–∏—Ç–æ–≤: ${this.overallResults.totalSuites}
  ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.overallResults.totalTests}
  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${this.overallResults.passedTests} (${this.getPercentage(this.overallResults.passedTests, this.overallResults.totalTests)}%)
  ‚Ä¢ –ü—Ä–æ–≤–∞–ª—å–Ω—ã—Ö: ${this.overallResults.failedTests} (${this.getPercentage(this.overallResults.failedTests, this.overallResults.totalTests)}%)
  ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: ${this.overallResults.totalDuration}ms`);

    console.log(`\nüéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${this.getOverallStatus()}`);

    if (this.overallResults.failedTests > 0) {
      this.log('–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è!', 'warning');
    } else {
      this.log('–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏!', 'success');
    }

    this.printRecommendations();
  }

  getPercentage(part, total) {
    return total > 0 ? ((part / total) * 100).toFixed(1) : '0.0';
  }

  getOverallStatus() {
    const passRate = this.overallResults.passedTests / this.overallResults.totalTests;

    if (passRate >= 0.95) return 'üü¢ –û–¢–õ–ò–ß–ù–û';
    if (passRate >= 0.8) return 'üü° –•–û–†–û–®–û';
    if (passRate >= 0.6) return 'üü† –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø';
    return 'üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´';
  }

  printRecommendations() {
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log(''.padEnd(60, '='));

    if (this.overallResults.failedTests > 0) {
      console.log('üîß –î–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º:');
      console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –≤—ã—à–µ');
      console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (sronoso.ru)');
      console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase —Ñ—É–Ω–∫—Ü–∏–π');
      console.log('   ‚Ä¢ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö (reestr.json, local_reestr.txt)');
    }

    console.log('üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:');
    console.log('   node test-parser.js         # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞');
    console.log('   node test-data-validation.js # –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   node test-api-endpoints.js  # –¢–µ—Å—Ç—ã API endpoints');
    console.log('   deno test --allow-net --allow-read supabase/functions/reestr-parser/test-parser.ts');
    console.log('   deno test --allow-net --allow-read supabase/functions/reestr-parser/test-supabase-function.ts');

    console.log(''.padEnd(60, '='));

    console.log('\nüìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:');
    console.log('   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç-—Å—é–∏—Ç');
    console.log('   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π');
    console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö API');
    console.log('   ‚Ä¢ –í–µ–¥–∏—Ç–µ –ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ');

    console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤ ' + new Date().toLocaleString('ru-RU'));
  }

  async generateReport() {
    const reportPath = path.join(__dirname, 'test-report-' + new Date().toISOString().replace(/[:.]/g, '-') + '.json');

    const report = {
      timestamp: new Date().toISOString(),
      summary: this.overallResults,
      environment: {
        nodeVersion: process.version,
        platform: process.platform,
        arch: process.arch,
        workingDirectory: __dirname
      },
      testSuites: this.testSuites.map(suite => ({
        name: suite.name,
        resultsCount: suite.results ? suite.results.length : 0,
        passedCount: suite.results ? suite.results.filter(r => r.success).length : 0,
        failedCount: suite.results ? suite.results.filter(r => !r.success).length : 0
      }))
    };

    try {
      fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
      this.log(`–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`, 'success');
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ${error.message || error}`, 'error');
    }
  }
}

// Environment setup
async function checkPrerequisites() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏–π...\n');

  const checks = [
    {
      name: 'Node.js fetch support',
      check: () => typeof global.fetch === 'function'
    },
    {
      name: 'File system access',
      check: () => fs.existsSync(path.join(__dirname, 'package.json'))
    },
    {
      name: 'Public data files',
      check: () => fs.existsSync(path.join(__dirname, 'public', 'reestr.json'))
    }
  ];

  let allPassed = true;
  for (const check of checks) {
    try {
      const result = check.check();
      console.log(`${result ? '‚úÖ' : '‚ùå'} ${check.name}`);
      if (!result) allPassed = false;
    } catch (error) {
      console.log(`‚ùå ${check.name}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏`);
      allPassed = false;
    }
  }

  console.log('');
  return allPassed;
}

// Main execution
async function main() {
  console.log('üöÄ Starting Master Test Runner...');

  try {
    console.log('üîç Checking prerequisites...');
    // Check prerequisites
    const prerequisitesOK = await checkPrerequisites();
    if (!prerequisitesOK) {
      console.log('‚ùå –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ.');
      process.exit(1);
    }

    console.log('‚úÖ Prerequisites OK, initializing test runner...');

    // Initialize test runner
    const testRunner = new MasterTestRunner();

    // Register test suites
    testRunner.registerTestSuite(
      '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞',
      ParserIntegrationTestSuite
    );

    testRunner.registerTestSuite(
      '–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–µ—Å—Ç—Ä–∞',
      DataValidationTestSuite
    );

    testRunner.registerTestSuite(
      '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints',
      APIEndpointsTestSuite
    );

    testRunner.registerTestSuite(
      'Live SRO —Å–∞–π—Ç',
      LiveSROTTestSuite
    );

    // Run all tests
    await testRunner.runAllSuites();

    // Generate report
    await testRunner.generateReport();

    // Exit code based on results
    process.exit(testRunner.overallResults.failedTests > 0 ? 1 : 0);

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    process.exit(1);
  }
}

// Export for programmatic use
export { MasterTestRunner };

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(error => {
    console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}
